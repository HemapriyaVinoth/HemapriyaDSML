# -*- coding: utf-8 -*-
"""projectpython.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bI_ueGPjyrdJeVLHlLj067YNuXL6vVl9

## **Project Title: Marketing Campaign Performance Insights**
Problem Statement:

In the highly competitive landscape of digital marketing, effectively evaluating the success of
various marketing campaigns is essential for optimizing return on investment (ROI) and
improving overall performance. Despite having extensive data on multiple campaigns, there
is a need for a thorough analysis to assess and compare key metrics such as conversion
rates, acquisition costs, and ROI across different campaign types, channels, and audience
segments. This project aims to uncover actionable insights by examining temporal trends,
geographical influences, and audience responses to identify factors driving campaign
success and provide recommendations for enhancing future marketing strategies.

### Project stets and objectives:
1)  Load the Dataset:

The first and foremost step is to import the libraries and load the dataset.
"""

# import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 1. dataset loaded in csv file
#  Read the marketing campaign data from the CSV file into a pandas DataFrame.
df = pd.read_csv('marketing_campaign.csv')

"""### 2) Descritive Analysis:

The descriptive analysis aims to provide a comprehensive understanding of the marketing campaign data by summarizing its key characteristics, distributions, and relationships between variables. This information serves as a starting point for deeper analysis and actionable insights.
"""

# 2. descriptive analysis
# Basic structure
# Print the first few rows of the dataset to get an overview of the data.
df.head(10)

"""In Pandas, df.head() is a method used to display the first few rows of your DataFrame. This allows you to quickly inspect the data and get a sense of its structure and content."""

#Obtain the number of rows and columns in the dataset.
df.shape

"""The df.shape attribute gives you a quick way to understand the size and structure of your DataFrame by telling you how many rows and columns it contains. This is fundamental information when working with data, as it helps you gauge the amount of data you're dealing with and how it's organized."""

# Get a concise summary of the dataset, including the data types and non-null values.
df.info()

"""The df.info() method is a valuable tool for quickly understanding the structure and basic characteristics of your DataFrame. It's often one of the first commands you'd use when exploring a new dataset. By providing an overview of data types, missing values, and memory usage, it helps you assess the quality and potential challenges of your data before diving into deeper analysis."""

#  Generate descriptive statistics for numerical columns.
df.describe()

"""The df.describe() method is a powerful tool for quickly gaining insights into the distribution of your numerical data. It helps you understand the central tendency (mean, median), the spread (standard deviation, quartiles), and the range (min, max) of your data. This information is crucial for identifying potential outliers, understanding data patterns, and making informed decisions during data analysis."""

# data exploration
# Print the number of unique Campaign_ID values in the dataset
df['Campaign_ID'].nunique()

""" The nunique() method is used to count the number of unique values in a Series or a column of a DataFrame."""

# List the unique values of the Location and Customer_Segment columns
print(f"Print the Unique_location: ",df['Location'].unique())
print(f"Print the Unique _customer_segments: ",df['Customer_Segment'].unique())

"""The unique()method is used to represents the unique location and customer segment columns in marketing campaign."""

# Count the occurrences of each category in the Campaign_Type and Channel_Used and columns.
print(df['Campaign_Type'].value_counts())
print(df['Channel_Used'].value_counts())

"""This method will count the unique values in each campaign type and channel used.

### 3) Exploratory Data Analysis (EDA) and Visualization:

"""

# Exploratory Data Analysis (EDA) and Visualization
# Campaign Performance
# Plot a scatter plot to visualize the relationship between Acquisition_Cost and ROI.
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Acquisition_Cost', y='ROI', data=df)
plt.title('Acquisition Cost vs. ROI')
plt.xlabel('Acquisition Cost')
plt.ylabel('ROI')
plt.show()

"""By understanding the relationship between Acquisition Cost and ROI, businesses can make better decisions about allocating their marketing budget. They can identify strategies that yield the highest ROI and optimize their spending for maximum returns.

 A scatter plot is a powerful tool for communicating data insights to stakeholders. It presents the relationship between two variables in a clear and concise way, making it easier for others to understand the findings of the analysis.

"""

# Create a bar chart to visualize the average Conversion_Rate for different
# Channel_Used, categorized by Campaign_Type.
plt.figure(figsize=(10, 6),facecolor='pink')
df_grouped = df.groupby(['Channel_Used', 'Campaign_Type'])['Conversion_Rate'].mean().reset_index()
print(df_grouped)
sns.barplot(x='Channel_Used', y='Conversion_Rate', hue='Campaign_Type',palette='Set1', data=df_grouped)
plt.title('Average Conversion Rate by Channel and Campaign Type')
plt.xlabel('Channel Used')
plt.ylabel('Average Conversion Rate')
plt.show()

"""Bar charts provide a clear and intuitive visual representation of the data. The height of each bar directly corresponds to the average conversion rate, making it easy to understand the differences between categories.


"""

# Visualize the distribution of Engagement_Score across different Campaign_Type
# using a box plot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Campaign_Type', y='Engagement_Score', data=df)
plt.title('Engagement Score Distribution by Campaign Type')
plt.xlabel('Campaign Type')
plt.ylabel('Engagement Score')
plt.show()

"""Box Plot Summary:

1.Represents the interquartile range (IQR) from
Q1 to Q3, showing where most of the data points lie.

2.Represents the middle value of the data.

3.Represent the range of values within 1.5 * IQR from the quartiles.

4.Points outside the whiskers, indicating extreme or unusual data points.

The box plot likely shows that the box representing social media campaigns has a lower median and potentially a smaller interquartile range compared to the boxes representing other campaign types. This suggests that, in general, social media campaigns tend to have lower engagement scores.

"""

# Analyze the average ROI by Company using a bar chart to compare the profitability
# of campaigns conducted by different companies.

plt.figure(figsize=(10, 6))
df_average_ROI = df['ROI'].mean()
print(f"Average ROI: {df_average_ROI:.2f}")
sns.barplot(x='Company', y='ROI', data=df)
plt.title('Average ROI by Company')
plt.xlabel('Company')
plt.ylabel('Average ROI')
plt.show()

"""The bar chart can reveal potential trends or patterns in ROI across different companies. For example, if a particular company consistently achieves higher ROI, it's worth investigating their marketing strategies to identify best practices that can be adopted by others.

The average ROI by company can serve as a benchmark for evaluating the overall effectiveness of marketing campaigns. By comparing individual company performance against the average, businesses can assess their relative success and identify areas for improvement.

In summary, this bar chart provides valuable insights into the profitability of marketing campaigns by company, enabling data-driven decision-making, strategic resource allocation, and performance optimization. It's a powerful tool for understanding and communicating the impact of marketing efforts across different companies.
"""

# Examine the correlation between Engagement_Score and Conversion_Rate
# using a heatmap
correlation_matrix = df[['Engagement_Score', 'Conversion_Rate']].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")

"""The heatmap visually represents the correlation between Engagement_Score and Conversion_Rate using color intensity. Here's how we can interpret it:

Color:

The color scale, typically ranging from cool (blue) to warm (red), indicates the strength and direction of the correlation.
In this case, if the heatmap shows a warmer color (e.g., red or orange) for the intersection of Engagement_Score and Conversion_Rate, it suggests a positive correlation. This means that as engagement score increases, conversion rate also tends to increase.
Conversely, a cooler color (e.g., blue) would indicate a negative correlation, meaning that as engagement score increases, conversion rate tends to decrease.

Annotation:
The heatmap usually includes annotations that display the actual correlation coefficient values. These values range from -1 to +1.
    
    1.A value close to +1 indicates a strong positive correlation.
    2.A value close to -1 indicates a strong negative correlation.
    3.A value close to 0 indicates a weak or no correlation.
Insights: By examining the color and annotation on the heatmap, you can quickly assess the relationship between the two variables. For example, if the heatmap shows a strong positive correlation between Engagement_Score and Conversion_Rate, it implies that higher engagement scores are associated with higher conversion rates. This information can be valuable for understanding customer behavior and optimizing marketing strategies.


Positive Correlation: A positive correlation between Engagement_Score and Conversion_Rate would suggest that campaigns that successfully engage customers are more likely to lead to conversions (e.g., purchases, sign-ups). This insight could guide marketers to focus on strategies that enhance customer engagement to improve conversion rates.


Negative Correlation (if observed): A negative correlation, though less common, would imply that higher engagement scores are surprisingly associated with lower conversion rates. This could indicate potential issues with the campaign's call to action or targeting, warranting further investigation.


Weak/No Correlation: If the heatmap shows a weak or no correlation, it suggests that engagement score may not be a strong predictor of conversion rate for this particular campaign or dataset. Marketers might need to explore other factors that influence conversions.

The heatmap provides a concise and visually appealing way to understand the correlation between engagement score and conversion rate, enabling marketers to make data-driven decisions about campaign optimization and resource allocation.
"""

#  Create a count plot to visualize the distribution of Target_Audience.
plt.figure(figsize=(10, 6))
sns.countplot(x='Target_Audience', data=df)
plt.title('Distribution of Target Audience')
plt.xlabel('Target Audience')
plt.ylabel('Count')
plt.show()

""" A count plot is an appropriate and informative visualization for understanding the distribution of the Target_Audience variable. It helps identify common and rare categories, understand the composition of the target audience, and effectively communicate these insights to stakeholders."""

# Identify which Customer_Segment has the highest Conversion_Rate for each
# Language using a bar chart.
plt.figure(figsize=(10, 6))
df_grouped = df.groupby(['Language', 'Customer_Segment'])['Conversion_Rate'].mean().reset_index()
print(df_grouped)
sns.barplot(x='Language', y='Conversion_Rate', hue='Customer_Segment', data=df_grouped)
plt.title('Conversion Rate by Customer Segment and Language')
plt.show()

"""The bar chart is justified for this visualization because it effectively compares Conversion_Rates across different Customer_Segments and Languages, presents categorical data clearly, is easy to interpret, and helps identify trends and patterns for informed decision-making."""

# Visualize the distribution of Acquisition_Cost across each Customer_Segment,
# categorized by Channel_Used, using a box plot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Customer_Segment', y='Acquisition_Cost', hue='Channel_Used', data=df)
plt.title('Acquisition Cost Distribution by Customer Segment and Channel')
plt.xlabel('Customer Segment')
plt.ylabel('Acquisition Cost')
plt.show()

"""Median:

The line inside the box represents the median value of the data.

Interquartile Range (IQR):

The box itself represents the interquartile range, which contains the middle 50% of the data.

Whiskers:

The lines extending from the box (whiskers) represent the range of the data within 1.5 times the IQR.

Outliers:

Points outside the whiskers are considered outliers and are plotted individually.

By examining the box plot, you can observe the distribution of acquisition costs for each customer segment and channel, identify potential outliers, and compare the cost distributions across different segments and channels.
"""

# Analyze average Conversion_Rate by Language using a bar chart to compare
# the effectiveness of campaigns conducted in different languages.
plt.figure(figsize=(10, 6))
df_grouped = df.groupby('Language')['Conversion_Rate'].mean().reset_index()
print(df_grouped)
sns.barplot(x='Language', y='Conversion_Rate', data=df_grouped)
plt.title('Average Conversion Rate by Language')
plt.xlabel('Language')
plt.ylabel('Average Conversion Rate')
plt.show()

""" A bar chart is justified for this visualization because it effectively compares Conversion_Rates across different languages, presents categorical data clearly, is easy to interpret, and helps identify trends and patterns for informed decision-making. It's a powerful tool for understanding and communicating the impact of language on marketing campaign performance."""

# Compare the Engagement_Score for different Channels_Used, segmented by
# Campaign_Type, using a bar chart.
plt.figure(figsize=(10, 6))
sns.barplot(x='Channel_Used', y='Engagement_Score', hue='Campaign_Type', data=df)
plt.title('Engagement Score by Channel and Campaign Type')
plt.xlabel('Channel Used')
plt.ylabel('Engagement Score')
plt.show()

"""The primary goal is to compare Engagement_Score across different Channels_Used, and a bar chart excels at visualizing comparisons between distinct categories. The height of each bar directly represents the average engagement score for that channel, making it easy to visually assess differences.A bar chart is the most appropriate and effective visualization for comparing engagement scores across different channels, segmented by campaign type, due to its ability to clearly represent categorical data, facilitate comparisons, and highlight trends and patterns."""

# Show the distribution of total ROI across different Channels_Used using a piechart.

plt.figure(figsize=(15, 6))
df_grouped = df.groupby('Channel_Used')['ROI'].sum()
print(df_grouped)
plt.pie(df_grouped, labels=df_grouped.index, autopct='%2.2f%%', startangle=90)
plt.title('Total ROI Distribution by Channel')
plt.show()

"""Pie charts are generally easy to understand for most audiences, as they provide a clear and intuitive representation of data proportions. The size of each slice directly corresponds to the proportion it represents, making the insights readily apparent

# New Section
"""

#  Plot a scatter plot to show the relationship between Clicks and Impressions
# for each Channel_Used.
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Clicks', y='Impressions', hue='Channel_Used', data=df)
plt.title('Clicks vs.Impressions by Channel')
plt.xlabel('Clicks')
plt.ylabel('Impressions')
plt.show()

"""The primary goal is to explore the relationship between Clicks and Impressions, and scatter plots are specifically designed to visualize the relationship between two continuous variables. They effectively show how changes in one variable (Clicks) are associated with changes in another (Impressions).We also want to see this relationship for each Channel_Used. Scatter plots can effectively handle this by using different colors or markers to represent each channel, allowing for easy visual comparison of the relationship across channels."""

# Plot the distribution of Duration using a histogram.
plt.figure(figsize=(10, 6))
sns.histplot(df['Duration'], bins=20, kde=True)
plt.title('Distribution of Duration')
plt.xlabel('Duration')
plt.ylabel('Frequency')
plt.show()

"""By observing the shape of the histogram, we can gain insights into the underlying distribution of the data. For instance, we can determine if the distribution is symmetric, skewed, unimodal, or bimodal. Duration is a continuous variable, making a histogram an appropriate choice for visualizing its distribution. Histograms are specifically designed to handle continuous data and reveal patterns within it.


"""

#  Analyze how the overall Conversion_Rate has changed over Date for each
# Company using a line chart
plt.figure(figsize=(10, 6))
df_grouped = df.groupby(['Date', 'Company'], as_index=False)['Conversion_Rate'].mean()
print(df_grouped)
df_grouped['Date'] = pd.to_datetime(df_grouped['Date'],format= '%d-%m-%Y')
sns.lineplot(x='Date', y='Conversion_Rate', hue='Company', data=df_grouped)
plt.title('Conversion Rate Over Time by Company')
plt.xlabel('Date')
plt.ylabel('Conversion Rate')
plt.show()

"""The approach combines the strengths of line charts, data grouping, aggregation, and datetime conversion to effectively analyze and visualize the overall conversion rate trend for each company over time. This approach is robust, insightful, and provides a clear understanding of the data, enabling data-driven decisions and strategic planning. It helps answer the specific question posed by the user and provides a clear and justified way to achieve the desired analysis."""

# Examine the trend of Engagement_Score over Date with a line chart.
plt.figure(figsize=(10, 6))
sns.lineplot(x='Date', y='Engagement_Score', data=df)
df['Date'] = pd.to_datetime(df['Date'],format= '%d-%m-%Y')
plt.title('Engagement Score Over Time')
plt.xlabel('Date')
plt.ylabel('Engagement Score')
plt.show()

"""In summary, the approach leverages the strengths of line charts, Seaborn's functionality, and datetime handling to create a clear, informative, and justified visualization of the Engagement_Score trend over Date within a Google Colab environment. It's a robust and efficient way to address the user's specific request"""

# Determine which location has the highest Acquisition_Cost using a bar chart.
plt.figure(figsize=(14, 6))
sns.barplot(x='Location', y='Acquisition_Cost', data=df)
plt.title('Acquisition Cost by Location')
plt.xlabel('Location')
plt.ylabel('Acquisition Cost')
plt.show()

"""In this case, we want to compare Acquisition_Cost across different locations, which are categorical variables. Bar charts excel at visually representing comparisons between distinct categories.By grouping the data by 'Location' and calculating the average Acquisition_Cost for each location, we obtain a clear and concise summary of the data. This allows us to focus on the overall trend of acquisition costs across locations."""

# Visualize the Conversion_Rate by different Location, categorized by
# Target_Audience, using a bar chart.
plt.figure(figsize=(13, 6))
sns.barplot(x='Location', y='Conversion_Rate', hue='Target_Audience', data=df)
plt.title('Conversion Rate by Location and Target Audience')
plt.xlabel('Location')
plt.ylabel('Conversion Rate')
plt.show()

"""In summary, a bar chart is justified for this visualization because it effectively compares Conversion_Rates across different Locations and Target_Audiences, presents categorical data clearly, is easy to interpret, and helps identify trends and patterns for informed decision-making. It's a powerful tool for understanding and communicating the impact of Location and Target_Audience on marketing campaign performance."""

# Illustrate the proportion of ROI by Location using a pie chart
plt.figure(figsize=(15, 6))
df_grouped = df.groupby('Location')['ROI'].sum()
print(df_grouped)
plt.pie(df_grouped, labels=df_grouped.index, autopct='%1.2f%%', startangle=90)
plt.title('Total ROI Distribution by Location')
plt.show()

"""In summary, a pie chart is justified for this visualization because it effectively illustrates the proportion of ROI by Location, is easy to interpret, emphasizes relative contribution, and is suitable for communicating the key message about the distribution of ROI across different Locations.

Conclusion:

Through our analysis, we discovered that social media campaigns, while generating significant impressions, tend to yield lower engagement scores compared to email and search campaigns. This suggests the need to refine social media strategies to enhance audience interaction and drive more meaningful engagement. Additionally, we observed a strong positive correlation between engagement score and conversion rate, indicating that campaigns that successfully capture audience attention are more likely to lead to desired outcomes like purchases or sign-ups. This highlights the importance of prioritizing engagement as a key metric for campaign optimization."


Final Thoughts:

"This project has provided valuable insights into the dynamics of marketing campaign performance. By leveraging these findings and implementing the recommendations, businesses can make data-driven decisions to optimize their marketing strategies, enhance audience engagement, and ultimately achieve greater success in their marketing endeavors. As the marketing landscape continues to evolve, ongoing analysis and adaptation will be crucial for sustained growth and achieving marketing goals."
"""